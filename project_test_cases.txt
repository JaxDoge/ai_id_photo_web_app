# Project Test Cases Documentation

This file contains test cases designed for the various components of the project, including Frontend, Backend, Database, and Machine Learning.

---

## 1. Frontend Test Cases
### a) Profile Page
**Test Case 1**: Verify the user data is displayed correctly.
- **Precondition**: User must be logged in.
- **Steps**:
  1. Navigate to the profile page.
  2. Check if the user's first name, last name, email, and avatar are displayed correctly.
- **Expected Result**: All user details match the logged-in user's data.

**Test Case 2**: Verify the profile edit functionality.
- **Precondition**: User must be logged in and on the profile page.
- **Steps**:
  1. Click on the "Edit" button.
  2. Update the user's first name, last name, gender, and country.
  3. Click "Save".
- **Expected Result**: The updated details should be reflected on the profile page.

**Test Case 3**: Verify the login functionality.
- **Steps**:
  1. Navigate to the login page.
  2. Enter valid email and password.
  3. Click the "Login" button.
- **Expected Result**: User is redirected to the dashboard or profile page.

---

### b) AWS S3 Uploads
**Test Case 1**: Validate the upload to S3 functionality.
- **Endpoint**: Utility Function `uploadToS3`
- **Steps**:
  1. Provide a valid file buffer and user ID to the function.
  2. Mock the AWS S3 instance to simulate a successful upload.
  3. Verify that the function returns the correct S3 URL.
- **Expected Result**: The function returns the correct URL of the uploaded file in S3.

**Test Case 2**: Validate error handling for failed S3 uploads.
- **Endpoint**: Utility Function `uploadToS3`
- **Steps**:
  1. Provide invalid file buffer or mock an S3 failure.
  2. Verify that the function throws the appropriate error.
- **Expected Result**: The function throws an error with the message "Failed to upload image to S3".

---

## 2. Database Test Cases
###  MongoDB
**Test Case 1**: Validate the creation of a new user.
- **Steps**:
  1. Send a POST request to /users/signup with valid user details.
  2. Query the database to ensure the user record is created.
- **Expected Result**: The new user is stored in the database with the correct fields.

**Test Case 2**: Validate user data updates.
- **Steps**:
  1. Update user data through the API (e.g., /users/update).
  2. Query the database to ensure the updated values are saved.
- **Expected Result**: The database reflects the updated user details.

---

## 3. Unit Testing (Jest for JavaScript)
###  Backend Functions
**Test Case 1**: Test S3 upload functionality.
- **Function**: `uploadToS3(fileBuffer, userId)`
- **Steps**:
  1. Mock AWS S3 instance to return a resolved promise with a URL.
  2. Call the function with a valid file buffer and user ID.
  3. Verify that the function returns the correct URL.
- **Expected Result**: The function successfully returns the S3 URL.

**Test Case 2**: Test error handling for failed S3 uploads.
- **Function**: `uploadToS3(fileBuffer, userId)`
- **Steps**:
  1. Mock AWS S3 instance to return a rejected promise.
  2. Call the function and verify that it throws an error with the correct message.
- **Expected Result**: The function throws "Failed to upload image to S3".

---

## 4. End-to-End Testing
**Test Case 1**: Verify the entire signup and profile update flow.
- **Steps**:
  1. Register a new user through /users/signup.
  2. Log in with the new user credentials.
  3. Update the profile data through the frontend.
  4. Verify the changes are reflected in the frontend and database.
- **Expected Result**: The entire flow works without errors, and data is consistent.

---

## Notes
- Ensure all test cases are run in a clean environment.
- Use Postman for manual API testing and tools like Jest/Mocha for automated tests.
- Document all test results for debugging and improvement purposes.